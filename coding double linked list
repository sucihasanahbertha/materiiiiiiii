2. PROGRAM DOUBLE LINKED LIST
PROGRAM :
#include <iostream>
#include <cstdio>
#include <cstdlib>
using namespace std;

struct node{
 int info;
 struct node *next;
 struct node *prev;
}*start;

class double_llist {
 public:
 void create_list(int value);
 void add_begin(int value);
 void add_after(int value, int position);
 void delete_element (int value);
 void searc_element(int value);
 void display_dlist();
 void count();
 void reverse();
 
 double_llist() {
  start = NULL;
 }
};

int main()
{
 int choice, element, position;
 double_llist dl;
 while (1){
  cout<<"-------------------------"<<endl;
  cout<<"-------------------------"<<endl;
  cout<<"1. Create Node"<<endl;
  cout<<"2. Add after beginning"<<endl;
  cout<<"3. Add after position"<<endl;
  cout<<"4. Delete"<<endl;
  cout<<"5. Display"<<endl;
  cout<<"6. Count"<<endl;
  cout<<"7. Reverse"<<endl;
  cout<<"8. Quit"<<endl;
  cout<<"Enter your choice : ";
  cin>>choice;
  
  switch (choice)
  {
   case 1:
    cout<<"Enter the element : ";
    cin>>element;
    dl.create_list(element);
    cout<<endl;
    break;
   case 2:
    cout<<"Enter the element : ";
    cin>>element;
    dl.add_begin(element);
    cout<<endl;
    break;
   //case 3:
   // cout<<"Enter the element : ";
   // cin>>element;
   // dl.add_begin(element);
   // cout<<endl;
   // break;
   case 4:
    if(start == NULL)
    {
     cout<<"List Empty, nothing to delete"<<endl;
     break;
    }
    cout<<"enter the element for deletion : ";
    cin>>element;
    dl.delete_element(element);
    cout<<endl;
    break;
   case 5:
    dl.display_dlist();
    cout<<endl;
    break;
   case 6:
    dl.count();
    break;
   //case 7:
   case 8:
    exit(1);
   default:
    cout<<"Wrong Choice"<<endl;
  }
 }
 return 0;
}


void double_llist::create_list(int value)
{
 struct node *s, *temp;
 temp=new(struct node);
 temp->info=value;
 temp->next=NULL;
 if (start==NULL)
 {
  temp->prev=NULL;
  start = temp;
 }
 else
 {
  s=start;
  while (s->next != NULL)
  s=s->next;
  temp->prev=s;
 }
}


void double_llist::add_begin(int value)
{
 if (start == NULL)
 {
  cout<<"First Create the list "<<endl;
  return;
 }
 struct node *temp;
 temp = new(struct node);
 temp->prev=NULL;
 temp->info=value;
 temp->next=start;
 start->prev=temp;
 start=temp;
 cout<<"element inserted"<<endl;
}


void double_llist::delete_element(int value)
{
 struct node *tmp, *q;
 if(start->info==value)
 {
  tmp=start;
  start=start->next;
  start->prev=NULL;
  cout<<"element deleted"<<endl;
 }
 q=start;
 
 while (q->next->next != NULL)
 {
 if (q->next->info==value)
 {
  tmp=q->next;
  q->next=tmp->next;
  tmp->next->prev=q;
  cout<<"element deleted"<<endl;
  free(tmp);
  return;
 } 
 q=q->next;
 }
 
 if(q->next->info==value)
 {
  tmp=q->next;
  free(tmp);
  q->next=NULL;
  cout<<"element deleted"<<endl;
  return;
 }
 cout<<"element "<<value<<" not found"<<endl;
}


void double_llist::display_dlist()
{
 struct node *q;
 if (start == NULL)
 {
  cout<<"List empty, nothing to display"<<endl;
  return;
 }
 q=start;
 cout<<"the doubly link is :"<<endl;
 while(q!=NULL)
 {
  cout<<q->info<<" <-> ";
  q=q->next;
 }
 cout<<"NULL"<<endl;
}


void double_llist::count()
{
 struct node *q = start;
 int cnt = 0;
 while (q != NULL)
 {
  q=q->next;
  cnt++;
 }
 cout<<"Number of element are : "<<cnt<<endl;
}
